---
version: 2.0
jobs:
  golden_and_smoke_tests:
    working_directory: /usr/src/artman
    docker:
      - image: docker:19-git
    steps:
      - &checkout_artman
        checkout:
          path: /usr/src/artman/
      - setup_remote_docker
      - &restore_artman_cache
        restore_cache:
          keys:
            - artman-{{ .Branch }}
          paths:
            - /caches/artman.tar
      - &load_build_and_save_artman_image
        run:
          name: Load Artman Docker image layer cache
          command: |
            set +o pipefail
            docker load -i /caches/artman.tar | true
            docker build --cache-from=artman -t artman --build-arg install_artman_from_source=true .
            mkdir -p /caches
            docker save -o /caches/artman.tar artman
      - &save_artman_cache
        save_cache:
          key: artman-{{ .Branch }}-{{ epoch }}
          paths:
            - /caches/artman.tar
      - run:
          name: Run golden tests
          command: |
            docker run -it -e RUNNING_IN_ARTMAN_DOCKER=True --name golden artman /bin/bash -c "pip install --upgrade pip; pip install --upgrade setuptools; pip install pytest; git clone https://github.com/googleapis/googleapis /artman/test/golden/googleapis; py.test -vv /artman/test/golden/artman_golden_test.py --googleapis-dir=/artman/test/golden/googleapis" || OUT=$?
            docker cp golden:/artman/test/golden/actual_library_example.golden /tmp/actual_library_example.golden
            if [ $OUT -ne 0 ];then
              exit $OUT
            fi
      - run:
          name: Run smoketest against selected APIs
          command: |
            EXIT_STATUS=0
            docker run -it -e RUNNING_IN_ARTMAN_DOCKER=True --workdir /tmp artman /bin/bash -c "artman --local --config=google/pubsub/artman_pubsub.yaml --root-dir=/googleapis generate csharp_gapic" || EXIT_STATUS=$?
            docker run -it -e RUNNING_IN_ARTMAN_DOCKER=True --workdir /tmp artman /bin/bash -c "artman --local --config=google/cloud/speech/artman_speech_v1.yaml --root-dir=/googleapis generate csharp_gapic" || EXIT_STATUS=$?
            docker run -it -e RUNNING_IN_ARTMAN_DOCKER=True --workdir /googleapis artman /bin/bash -c "mkdir /tmp/pubsub-go; artman --local --output-dir /tmp/pubsub-go --config=google/pubsub/artman_pubsub.yaml generate go_gapic" || EXIT_STATUS=$?
            docker run -it -e RUNNING_IN_ARTMAN_DOCKER=True --workdir /googleapis artman /bin/bash -c "mkdir /tmp/speech-go; artman --local --output-dir /tmp/speech-go --config=google/cloud/speech/artman_speech_v1.yaml generate go_gapic" || EXIT_STATUS=$?
            docker run -it -e RUNNING_IN_ARTMAN_DOCKER=True --workdir /googleapis artman /bin/bash -c "mkdir /tmp/pubsub-java; artman --local --output-dir /tmp/pubsub-java --config=google/pubsub/artman_pubsub.yaml generate java_gapic" || EXIT_STATUS=$?
            docker run -it -e RUNNING_IN_ARTMAN_DOCKER=True --workdir /googleapis artman /bin/bash -c "mkdir /tmp/speech-java; artman --local --output-dir /tmp/speech-java --config=google/cloud/speech/artman_speech_v1.yaml generate java_gapic" || EXIT_STATUS=$?
            docker run -it -e RUNNING_IN_ARTMAN_DOCKER=True --workdir /googleapis artman /bin/bash -c "mkdir /tmp/pubsub-node;artman --local --output-dir /tmp/pubsub-node --config=google/pubsub/artman_pubsub.yaml generate nodejs_gapic" || EXIT_STATUS=$?
            docker run -it -e RUNNING_IN_ARTMAN_DOCKER=True --workdir /googleapis artman /bin/bash -c "mkdir /tmp/speech-node;artman --local --output-dir speech-node --config=google/cloud/speech/artman_speech_v1.yaml generate nodejs_gapic" || EXIT_STATUS=$?
            docker run -it -e RUNNING_IN_ARTMAN_DOCKER=True --workdir /googleapis artman /bin/bash -c "mkdir /tmp/pubsub-php; artman --local --output-dir /tmp/pubsub-php --config=google/pubsub/artman_pubsub.yaml generate php_gapic" || EXIT_STATUS=$?
            docker run -it -e RUNNING_IN_ARTMAN_DOCKER=True --workdir /googleapis artman /bin/bash -c "mkdir /tmp/speech-php; artman --local --output-dir /tmp/speech-php --config=google/cloud/speech/artman_speech_v1.yaml generate php_gapic" || EXIT_STATUS=$?
            docker run -it -e RUNNING_IN_ARTMAN_DOCKER=True --workdir /googleapis artman /bin/bash -c "mkdir /tmp/pubsub-python; artman --local --output-dir /tmp/pubsub-python --config=google/pubsub/artman_pubsub.yaml generate python_gapic" || EXIT_STATUS=$?
            docker run -it -e RUNNING_IN_ARTMAN_DOCKER=True --workdir /googleapis artman /bin/bash -c "mkdir /tmp/speech-python; artman --local --output-dir /tmp/speech-python --config=google/cloud/speech/artman_speech_v1.yaml generate python_gapic" || EXIT_STATUS=$?
            docker run -it -e RUNNING_IN_ARTMAN_DOCKER=True --workdir /googleapis artman /bin/bash -c "mkdir /tmp/pubsub-ruby; artman --local --output-dir /tmp/pubsub-ruby --config=google/pubsub/artman_pubsub.yaml generate ruby_gapic" || EXIT_STATUS=$?
            docker run -it -e RUNNING_IN_ARTMAN_DOCKER=True --workdir /googleapis artman /bin/bash -c "mkdir /tmp/speech-ruby; artman --local --output-dir /tmp/speech-ruby --config=google/cloud/speech/artman_speech_v1.yaml generate ruby_gapic" || EXIT_STATUS=$?
            exit $EXIT_STATUS
      - run:
          name: Check samples are generated for selected APIs
          command: |
            EXIT_STATUS=0
            docker run -it --rm -d --name samplegen --workdir /tmp -e RUNNING_IN_ARTMAN_DOCKER=True artman
            docker exec samplegen mkdir /tmp/language-python
            docker exec samplegen artman --local --output-dir /tmp/language-python --config=google/cloud/language/artman_language_v1.yaml --root-dir=/googleapis --generator-args='--dev_samples' generate python_gapic || EXIT_STATUS=$?
            docker exec samplegen find /tmp/language-python/python/language-v1/samples/v1 -mindepth 1 | read || EXIT_STATUS=$?
            docker exec samplegen mkdir /tmp/talent-php
            docker exec samplegen artman --local --output-dir /tmp/talent-php --config=google/cloud/talent/artman_talent_v4beta1.yaml --root-dir=/googleapis --generator-args='--dev_samples' generate php_gapic || EXIT_STATUS=$?
            docker exec samplegen find /tmp/talent-php/php/google-cloud-talent-v4beta1/samples/V4beta1 -mindepth 1 | read || EXIT_STATUS=$?
            docker exec samplegen mkdir /tmp/speech-nodejs
            docker exec samplegen artman --local --output-dir /tmp/speech-nodejs --config=google/cloud/speech/artman_speech_v1p1beta1.yaml --root-dir=/googleapis --generator-args='--dev_samples' generate nodejs_gapic || EXIT_STATUS=$?
            docker exec samplegen find /tmp/speech-nodejs/js/speech-v1p1beta1/samples/v1p1beta1 -mindepth 1 | read || EXIT_STATUS=$?
            docker stop samplegen
            exit $EXIT_STATUS
      - run:
          name: Conditionally run smoketests against all APIs
          command: |
            if [ "${CIRCLE_BRANCH}" == "master" ] || [ "${CIRCLE_TAG}" != "" ]; then
              docker run -it -e RUNNING_IN_ARTMAN_DOCKER=True --name smoketest artman /bin/bash -c "git clone https://github.com/googleapis/googleapis /tmp/googleapis_smoketest; python3 /artman/test/smoketest_artman.py --root-dir=/tmp/googleapis_smoketest --log=/tmp/smoketest.log" || OUT=$?
              docker cp smoketest:/tmp/smoketest.log /tmp/smoketest.log
              if [ $OUT -ne 0 ];then
                exit $OUT
              fi
            else
              echo "Skipping smoke tests in branch ${CIRCLE_BRANCH}."
            fi
      - store_artifacts:
          path: /tmp/actual_library_example.golden
      - store_artifacts:
          path: /tmp/smoketest.log

  build_and_release_docker_image:
    working_directory: /usr/src/artman
    docker:
      - image: docker:17.12.1-ce-git
    steps:
      - *checkout_artman
      - setup_remote_docker
      - *restore_artman_cache
      - *load_build_and_save_artman_image
      - deploy:
          name: Push Artman Docker image
          command: |
            echo "Logging in to docker as ${DOCKER_USER} (change this in CircleCI environment if needed)"
            docker login -u "${DOCKER_USER}" -p "${DOCKER_PASS}"
            docker tag artman "googleapis/artman:AUTO_BUILD_$CIRCLE_BUILD_NUM"
            docker push "googleapis/artman:AUTO_BUILD_$CIRCLE_BUILD_NUM"
            docker tag artman "googleapis/artman:head"
            docker push "googleapis/artman:head"

  release:
    working_directory: /usr/src/artman
    docker:
      - image: docker:17.12.1-ce-git
    steps:
      - *checkout_artman
      - setup_remote_docker
      - *restore_artman_cache
      - *load_build_and_save_artman_image
      - run:
          name: Decrypt PyPI configuration file
          command: |
            docker run -i python:3.6 openssl aes-256-cbc -d -k "${PYPIRC_ENCRYPTION_KEY}" < /usr/src/artman/.circleci/.pypirc.enc > /root/.pypirc
      - run:
          name: Release to PyPI from inside Docker image
          command: |
            docker create --name release --workdir /root/artman python:3.6 python3 setup.py sdist upload
            docker cp /usr/src/artman release:/root
            docker cp /root/.pypirc release:/root/.pypirc
            docker start --attach release
      - run:
          name: Push Artman Docker tagged image
          command: |
            echo "Logging in to docker as ${DOCKER_USER} (change this in CircleCI environment if needed)"
            # extract version number from setup.py
            ARTMAN_VERSION=`awk '/ENV ARTMAN_VERSION/ { print $3; }' Dockerfile`
            # push to docker
            docker login -u "${DOCKER_USER}" -p "${DOCKER_PASS}"
            docker tag artman "googleapis/artman:AUTO_BUILD_$CIRCLE_BUILD_NUM"
            docker push "googleapis/artman:AUTO_BUILD_$CIRCLE_BUILD_NUM"
            docker tag artman "googleapis/artman:latest"
            docker push "googleapis/artman:latest"
            docker tag artman "googleapis/artman:${ARTMAN_VERSION}"
            docker push "googleapis/artman:${ARTMAN_VERSION}"
      - run:
          name: Remove PyPI configuration file
          command: |
            rm -f /root/.pypirc
            docker rm release
          when: always

  docs:
    docker:
      - image: python:3.6
    steps:
      - *checkout_artman
      - run:
          name: Install nox.
          command: pip install --upgrade nox-automation==0.19.1
      - run:
          name: Build the docs.
          command: nox -e docs
    working_directory: /usr/src/artman/

  unit-python2.7:
    docker:
      - image: python:2.7
    steps:
      - checkout
      - run:
          name: Install nox and codecov.
          command: pip install --upgrade nox-automation==0.19.1 codecov
      - run:
          name: Run unit tests.
          command: nox -e "unit_tests(python_version='2.7')"
    working_directory: /usr/src/artman/

  unit-python3.5:
    docker:
      - image: python:3.5
    steps:
      - *checkout_artman
      - run:
          name: Install nox and codecov.
          command: pip install --upgrade nox-automation==0.19.1 codecov
      - run:
          name: Run unit tests.
          command: nox -e "unit_tests(python_version='3.5')"
    working_directory: /usr/src/artman/

  unit-python3.6:
    docker:
      - image: python:3.6
    steps:
      - checkout
      - run:
          name: Install nox and codecov.
          command: pip install --upgrade nox-automation==0.19.1 codecov
      - run:
          name: Run unit tests.
          command: nox -e "unit_tests(python_version='3.6')"
    working_directory: /usr/src/artman/

workflows:
  version: 2
  tests:
    jobs:
      - unit-python2.7:
          filters: &all_commits
            tags:
              only: /.*/
      - unit-python3.5:
          filters: *all_commits
      - unit-python3.6:
          filters: *all_commits
      - docs:
          filters: *all_commits
      - golden_and_smoke_tests:
          filters: *all_commits
      - build_and_release_docker_image:
          requires:
            - unit-python2.7
            - unit-python3.5
            - unit-python3.6
            - docs
            - golden_and_smoke_tests
          filters:
            branches:
              only: master
            tags: &releases
              only: '/^v[\d.]+$/'
      - release:
          requires:
            - build_and_release_docker_image
          filters:
            branches:
              ignore: /.*/
            tags: *releases
